### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  access_token: String
  createdAt: DateTime!
  expires_at: Int
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  updatedAt: DateTime!
  user: User
  userId: String
}

type Authenticator {
  counter: Int
  createdAt: DateTime!
  credentialBackedUp: Boolean
  credentialDeviceType: String
  credentialID: String
  credentialPublicKey: String
  providerAccountId: String
  transports: String
  updatedAt: DateTime!
  user: User
  userId: String
}

type Category {
  id: ID
  name: String
  posts: [Post!]!
}

type Comment {
  content: String
  createdAt: DateTime!
  id: ID
  post: Post
  postId: String
  updatedAt: DateTime!
  user: User
  userId: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DefaultFeedResponse {
  posts: [Post!]!
  totalCount: Int!
  totalPages: Int!
}

type FriendWithStatus {
  status: FriendshipStatus!
  user: User!
}

type Friendship {
  id: String
  status: String
  userA: User
  userB: User
}

enum FriendshipStatus {
  ACCEPTED
  PENDING
  REJECTED
}

type InfoFeedResponse {
  privatePostsCount: Int!
  publicPostsCount: Int!
}

type Like {
  createdAt: DateTime!
  id: ID
  post: Post
  postId: String
  user: User
  userId: String
}

type Mutation {
  createCategory(name: String!): Category
  createFriendshipRequest(fromUserId: String!, toUserId: String!): Friendship
  createNotification(actorId: String!, content: String!, entityId: String!, entityType: NotificationEntityType!, read: Boolean! = false, type: NotificationType!, userId: String!): Notification
  createPost(authorId: String!, categories: [String!]!, content: String!, thumbnail: String, title: String!): Post
  createUser(email: String!, image: String, name: String!, password: String!, username: String!): User
  deleteFriendship(friendshipId: String!): Friendship
  triggerLike(postId: String!, userId: String!): Like
  updateFriendshipStatus(friendshipId: String!, status: String!): Friendship
  updateNotificationReadStatus(notificationId: String!): Notification
}

type Notification {
  actor: User!
  actorId: String!
  content: String!
  createdAt: DateTime!
  entityId: String
  entityType: String!
  expiresAt: DateTime!
  id: ID!
  read: Boolean!
  type: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

enum NotificationEntityType {
  COMMENT
  FRIENDSHIP
  POST
}

enum NotificationType {
  COMMENT
  FRIEND_REQUEST
  LIKE
}

type Post {
  author: User
  authorId: String
  categories: [Category!]!
  comments: [Comment!]!
  content: String
  createdAt: DateTime!
  id: ID
  likes: [Like!]
  thumbnail: String
  title: String
  updatedAt: DateTime!
  visibility: PostVisibilityType!
}

enum PostVisibilityType {
  PRIVATE
  PUBLIC
}

type Query {
  categories: [Category!]!
  exploreFeedPosts(category: String, orderBy: SortOrder = desc, searchString: String, skip: Int, take: Int): DefaultFeedResponse!
  friends(userId: String!): [Friendship!]!
  friendship(fromUserId: String!, toUserId: String!): Friendship
  likes: [Like]!
  notifications(userId: String!): [Notification!]!
  post(postId: String!): Post
  posts: [Post!]!
  privateFeedPosts(category: String, orderBy: SortOrder = desc, searchString: String, skip: Int, take: Int, userId: String!): DefaultFeedResponse!
  privateProfileFeed(category: String, orderBy: SortOrder = desc, searchString: String, skip: Int, take: Int, userId: String!): DefaultFeedResponse!
  privateProfileFeedInfo(userId: String!): InfoFeedResponse!
  user(userId: String!): User
  users: [User!]!
}

type Session {
  createdAt: DateTime!
  expires: DateTime!
  sessionToken: String
  updatedAt: DateTime!
  user: User
  userId: String
}

enum SortOrder {
  asc
  desc
}

type User {
  accounts: [Account!]
  authenticators: [Authenticator!]
  comments: [Comment!]
  createdAt: DateTime!
  email: String
  emailVerified: DateTime
  friends: [FriendWithStatus!]
  id: ID
  image: String
  likes: [Like!]
  name: String
  notificationsReceived: [Notification!]
  notificationsSent: [Notification!]
  password: String
  posts: [Post!]
  sessions: [Session!]
  updatedAt: DateTime!
  username: String!
}

type VerificationToken {
  expires: DateTime!
  identifier: String
  token: String
}