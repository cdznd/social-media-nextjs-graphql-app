datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  password      String?
  username      String          @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  posts Post[]
  likes Like[]
  comments Comment[]

  notificationsReceived Notification[] @relation("UserNotifications")
  notificationsSent Notification[]  @relation("ActorNotifications")

  friendsA Friendship[] @relation("FriendshipA") // When a user sends the friend request and is the friendA
  friendsB Friendship[] @relation("FriendshipB") // When a user receives the friend request is the friendB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friendship {
  id        String            @id @default(cuid())
  userAId   String
  userBId   String
  userA     User              @relation("FriendshipA", fields: [userAId], references: [id])
  userB     User              @relation("FriendshipB", fields: [userBId], references: [id])
  status    FriendshipStatus  @default(PENDING)
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  thumbnail   String?
  authorId    String
  author      User      @relation(fields: [authorId], references: [id]) // Many-to-one relationship with User
  likes       Like[]    
  comments    Comment[]
  categories  Category[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id    String    @id @default(cuid())
  name  String    @unique    
  posts Post[]
}

model Like {
  id        String      @id @default(cuid())
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  // Defining a compound unique constraint, for unique like per post
  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  LIKE
  COMMENT
  FRIEND_REQUEST
}

enum EntityType {
  POST
  COMMENT
  USER
}

model Notification {
  id         String   @id @default(cuid())
  type       NotificationType
  content    String
  userId     String
  user       User     @relation("UserNotifications", fields: [userId], references: [id])
  actorId    String?
  actor      User?    @relation("ActorNotifications", fields: [actorId], references: [id])
  entityId   String?
  entityType EntityType?
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  expiresAt  DateTime?
}